name: splice-validator

volumes:
  postgres-splice:
  domain-upgrade-dump:
  keycloak-data:

networks:
  splice_validator:
    driver: bridge

services:
  postgres-splice:
    image: "postgres:${SPLICE_POSTGRES_VERSION}"
    environment:
      - POSTGRES_USER=${SPLICE_DB_USER}
      - POSTGRES_PASSWORD=${SPLICE_DB_PASSWORD}
      - POSTGRES_DB=postgres # not used by splice
      # Any env vars starting with CREATE_DATABASE_ will be used to create a database
      - CREATE_DATABASE_participant=participant-${MIGRATION_ID}
      - CREATE_DATABASE_validator=validator
      - CREATE_DATABASE_keycloak=keycloak
      - CREATE_DATABASE_dserv=dserv
    ports:
      - 5432:5432
    volumes:
      - postgres-splice:/var/lib/postgresql/data
      - ./postgres-entrypoint.sh:/postgres-entrypoint.sh
    entrypoint: /postgres-entrypoint.sh
    user: "postgres"
    command:
      - postgres
      - -c
      - max_connections=8000
    healthcheck:
      test: "pg_isready -U ${SPLICE_DB_USER} -d postgres"
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 60s
    networks:
      - ${DOCKER_NETWORK:-splice_validator}

  # Keycloak authentication service
  # Note: No direct port exposure - access via nginx-keycloak proxy on port 8082
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres-splice:5432/keycloak
      - KC_DB_USERNAME=${SPLICE_DB_USER}
      - KC_DB_PASSWORD=${SPLICE_DB_PASSWORD}
    volumes:
      - ./config/keycloak/data:/opt/keycloak/data/import
    command:
      - start-dev
      - --import-realm
    depends_on:
      postgres-splice:
        condition: service_healthy
    networks:
      - ${DOCKER_NETWORK:-splice_validator}

    healthcheck:
      test: ["CMD-SHELL", "timeout 10 bash -c 'until echo > /dev/tcp/localhost/8080; do sleep 1; done'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # IMPORTANT: nginx-keycloak proxy is required for proper Keycloak configuration
  # - Provides consistent port mapping (8082) for Keycloak access
  # - Handles CORS and proxy configuration for Keycloak
  # - Simplifies authentication setup for applications
  # - DO NOT REMOVE: This service is essential for the authentication flow
  nginx-keycloak:
    image: "nginx:${NGINX_VERSION}"
    container_name: nginx-keycloak
    volumes:
      - ./config/nginx-keycloak/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx-keycloak/keycloak.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "8082:8082"
    depends_on:
      - keycloak
    networks:
      - ${DOCKER_NETWORK:-splice_validator}

  participant:
    image: "${IMAGE_REPO}canton-participant:${IMAGE_TAG}"
    environment:
      - AUTH_JWKS_URL=${AUTH_JWKS_URL}
      - AUTH_TARGET_AUDIENCE=${LEDGER_API_AUTH_AUDIENCE}
      - CANTON_PARTICIPANT_ADMIN_USER_NAME=${LEDGER_API_ADMIN_USER}
      - CANTON_PARTICIPANT_POSTGRES_SERVER=${SPLICE_DB_SERVER}
      - CANTON_PARTICIPANT_POSTGRES_SCHEMA=participant
      - CANTON_PARTICIPANT_POSTGRES_USER=${SPLICE_DB_USER}
      - CANTON_PARTICIPANT_POSTGRES_PASSWORD=${SPLICE_DB_PASSWORD}
      - CANTON_PARTICIPANT_POSTGRES_DB=participant-${MIGRATION_ID}
      - CANTON_PARTICIPANT_POSTGRES_PORT=${SPLICE_DB_PORT}
    depends_on:
      postgres-splice:
        condition: service_healthy
    restart: always
    networks:
      - ${DOCKER_NETWORK:-splice_validator}

  validator:
    image: "${IMAGE_REPO}validator-app:${IMAGE_TAG}"
    environment:
      - SPLICE_APP_VALIDATOR_LEDGER_API_AUTH_URL=${AUTH_WELLKNOWN_URL}
      - SPLICE_APP_VALIDATOR_LEDGER_API_AUTH_CLIENT_ID=${VALIDATOR_AUTH_CLIENT_ID}
      - SPLICE_APP_VALIDATOR_LEDGER_API_AUTH_CLIENT_SECRET=${VALIDATOR_AUTH_CLIENT_SECRET}
      - SPLICE_APP_VALIDATOR_LEDGER_API_AUTH_AUDIENCE=${LEDGER_API_AUTH_AUDIENCE}
      - SPLICE_APP_VALIDATOR_LEDGER_API_AUTH_SCOPE=${LEDGER_API_AUTH_SCOPE:-}
      - SPLICE_APP_VALIDATOR_LEDGER_API_AUTH_USER_NAME=${LEDGER_API_ADMIN_USER}
      - SPLICE_APP_VALIDATOR_WALLET_USER_NAME=${WALLET_ADMIN_USER}
      - SPLICE_APP_VALIDATOR_AUTH_AUDIENCE=${VALIDATOR_AUTH_AUDIENCE}
      - SPLICE_APP_VALIDATOR_AUTH_JWKS_URL=${AUTH_JWKS_URL}
      - SPLICE_APP_VALIDATOR_PARTICIPANT_ADDRESS=participant
      - SPLICE_APP_VALIDATOR_SV_SPONSOR_ADDRESS=${SPONSOR_SV_ADDRESS}
      - SPLICE_APP_VALIDATOR_ONBOARDING_SECRET=${ONBOARDING_SECRET}
      - SPLICE_APP_VALIDATOR_SCAN_ADDRESS=${SCAN_ADDRESS}
      - SPLICE_APP_VALIDATOR_PARTICIPANT_IDENTIFIER=${PARTICIPANT_IDENTIFIER}
      - SPLICE_APP_VALIDATOR_PARTY_HINT=${PARTY_HINT}
      - SPLICE_APP_CONTACT_POINT=${CONTACT_POINT}
      - |
        ADDITIONAL_CONFIG_PERSISTENCE=
            canton.validator-apps.validator_backend.storage {
              type = postgres
              config {
                dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
                properties = {
                  databaseName = validator
                  currentSchema = validator
                  serverName = ${SPLICE_DB_SERVER}
                  portNumber = ${SPLICE_DB_PORT}
                  user = ${SPLICE_DB_USER}
                  password = ${SPLICE_DB_PASSWORD}
                  tcpKeepAlive = true
                }
              }
            }
      - |
        ADDITIONAL_CONFIG_APP_INSTANCES=
          canton.validator-apps.validator_backend.app-instances={}
      - |
        ADDITIONAL_CONFIG_BFT_SCAN=
          canton.validator-apps.validator_backend.scan-client.type = "bft"
          canton.validator-apps.validator_backend.scan-client.seed-urls = [ "${SCAN_ADDRESS}" ]
      - |
        ADDITIONAL_CONFIG_MIGRATION_ID=
            canton.validator-apps.validator_backend {
              domain-migration-id = ${MIGRATION_ID}
            }
      - ADDITIONAL_CONFIG_GLOBAL_DOMAIN_UPGRADE_DUMP_PATH=canton.validator-apps.validator_backend.domain-migration-dump-path = "/domain-upgrade-dump/domain_migration_dump.json"
    depends_on:
      postgres-splice:
        condition: service_healthy
    restart: always
    networks:
      - ${DOCKER_NETWORK:-splice_validator}
    volumes:
      - domain-upgrade-dump:/domain-upgrade-dump

  wallet-web-ui:
    image: "${IMAGE_REPO}wallet-web-ui:${IMAGE_TAG}"
    environment:
      - SPLICE_APP_UI_AUTH_AUDIENCE=${VALIDATOR_AUTH_AUDIENCE}
      - SPLICE_APP_UI_AUTH_CLIENT_ID=${WALLET_UI_CLIENT_ID}
      - SPLICE_APP_UI_AUTH_URL=${AUTH_URL}
      - SPLICE_APP_UI_HTTP_URL=true
      - SPLICE_APP_UI_NETWORK_NAME=${SPLICE_APP_UI_NETWORK_NAME}
      - SPLICE_APP_UI_NETWORK_FAVICON_URL=${SPLICE_APP_UI_NETWORK_FAVICON_URL}
      - SPLICE_APP_UI_AMULET_NAME=${SPLICE_APP_UI_AMULET_NAME}
      - SPLICE_APP_UI_AMULET_NAME_ACRONYM=${SPLICE_APP_UI_AMULET_NAME_ACRONYM}
      - SPLICE_APP_UI_NAME_SERVICE_NAME=${SPLICE_APP_UI_NAME_SERVICE_NAME}
      - SPLICE_APP_UI_NAME_SERVICE_NAME_ACRONYM=${SPLICE_APP_UI_NAME_SERVICE_NAME_ACRONYM}
    networks:
      - ${DOCKER_NETWORK:-splice_validator}

  ans-web-ui:
    image: "${IMAGE_REPO}ans-web-ui:${IMAGE_TAG}"
    environment:
      - SPLICE_APP_UI_AUTH_AUDIENCE=${VALIDATOR_AUTH_AUDIENCE}
      - SPLICE_APP_UI_AUTH_CLIENT_ID=${ANS_UI_CLIENT_ID}
      - SPLICE_APP_UI_AUTH_URL=${AUTH_URL}
      - SPLICE_APP_WALLET_REDIRECT=http://wallet.localhost
      - SPLICE_APP_UI_HTTP_URL=true
      - SPLICE_APP_UI_NETWORK_NAME=${SPLICE_APP_UI_NETWORK_NAME}
      - SPLICE_APP_UI_NETWORK_FAVICON_URL=${SPLICE_APP_UI_NETWORK_FAVICON_URL}
      - SPLICE_APP_UI_AMULET_NAME=${SPLICE_APP_UI_AMULET_NAME}
      - SPLICE_APP_UI_AMULET_NAME_ACRONYM=${SPLICE_APP_UI_AMULET_NAME_ACRONYM}
      - SPLICE_APP_UI_NAME_SERVICE_NAME=${SPLICE_APP_UI_NAME_SERVICE_NAME}
      - SPLICE_APP_UI_NAME_SERVICE_NAME_ACRONYM=${SPLICE_APP_UI_NAME_SERVICE_NAME_ACRONYM}
    networks:
      - ${DOCKER_NETWORK:-splice_validator}

  nginx:
    image: "nginx:${NGINX_VERSION}"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 80:80
    depends_on:
      - ans-web-ui
      - wallet-web-ui
      - validator
    restart: always
    networks:
      - ${DOCKER_NETWORK:-splice_validator}
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
